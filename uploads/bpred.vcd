$date
	Sat Nov 23 14:46:57 2024
$end

$version
	Synopsys VCS version V-2023.12-SP2-1_Full64
$end

$timescale
	100ps
$end

$comment Csum: 1 7c07967cdd5d019c $end


$scope module testbench $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$var reg 1 # incoming_branch_valid $end
$var reg 32 $ incoming_branch_PC [31:0] $end
$var reg 1 % resolving_branch_direction $end
$var reg 2 & resolving_branch_status [1:0] $end
$var reg 32 ' resolving_branch_PC [31:0] $end
$var reg 2 ( checkpointed_bhr [1:0] $end
$var reg 1 ) predicted_direction $end
$var reg 2 * bhr [1:0] $end
$var reg 1 + predicted_direction_correct $end
$var reg 2 , bhr_correct [1:0] $end
$var reg 8 - pht_correct [7:0] $end

$scope task assert_correct $end

$scope begin unnamed$$_0 $end
$upscope $end

$upscope $end


$scope task reset_inputs $end
$upscope $end


$scope task reset_corrects $end

$scope begin unnamed$$_0 $end
$upscope $end

$upscope $end


$scope task reset_state $end
$upscope $end


$scope task print_state $end

$scope begin unnamed$$_0 $end
$upscope $end

$upscope $end


$scope module DUT $end
$var reg 1 . incoming_branch_valid $end
$var reg 32 / incoming_branch_PC [31:0] $end
$var reg 2 0 bhr [1:0] $end
$var reg 1 1 resolving_branch_direction $end
$var reg 2 2 resolving_branch_status [1:0] $end
$var reg 32 3 resolving_branch_PC [31:0] $end
$var reg 2 4 checkpointed_bhr [1:0] $end
$var reg 8 5 pht [7:0] $end
$var reg 1 6 clock $end
$var reg 1 7 reset $end
$var reg 1 8 predicted_direction $end
$var reg 8 9 pht_n [7:0] $end
$var reg 2 : bhr_n [1:0] $end
$var reg 2 ; recovered_bhr [1:0] $end
$var reg 2 < incoming_pht_index [1:0] $end
$var reg 2 = resolving_pht_index [1:0] $end
$var reg 1 > predicted_direction_n $end

$scope begin unnamed$$_0 $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
x.
x8
x7
x1
0!
x#
x)
x+
0>
x"
x%
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 3
bxx 0
bxx 4
bxx 2
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx $
bxxxxxxxx 5
bxxxxxxxx -
bxxxxxxxx 9
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '
bxx *
bxx ,
bxx :
bxx (
bxx <
bxx ;
bxx &
bxx =
06
$end
#150
1!
16
08
0)
#300
0!
06
1"
17
0#
0.
b00000000000000000000000000000000 $
b00000000000000000000000000000000 /
0%
01
b00 &
b00 2
b00000000000000000000000000000000 '
b00000000000000000000000000000000 3
b00 (
b00 4
b00 =
0+
b10101010 -
b00 ,
#450
1!
16
b00 0
b10101010 5
b00 :
b00 ;
b00 <
b10101010 9
#600
0!
06
0"
07
#750
1!
16
#900
0!
06
#1050
1!
16
#1200
0!
06
1"
17
#1350
1!
16
#1500
0!
06
0"
07
#1650
1!
16
#1800
0!
06
1%
11
b10 &
b10 2
b10101001 -
b01 ,
b10101001 9
b01 :
b01 ;
b01 <
#1950
1!
16
b01 0
b10101001 5
b10101000 9
#2100
0!
06
0%
01
b00 &
b00 2
1#
1.
b00000000000000000000000000000100 $
b00000000000000000000000000000100 /
b00 <
1+
b11 ,
b01 ;
b10101001 9
b10 :
1>
b11 :
#2250
1!
16
b11 0
18
1)
b11 ;
b10 <
0>
b10 :
#2400
0!
06
0#
0.
b00000000000000000000000000000000 $
b00000000000000000000000000000000 /
b11 <
1%
11
b01 &
b01 2
b00000000000000000000000000000100 '
b00000000000000000000000000000100 3
b01 =
b01 (
b01 4
b00 =
0+
b10101000 -
b11 :
b10101000 9
#2550
1!
16
b10101000 5
08
0)
#2700
0!
06
1"
17
0%
01
b00 &
b00 2
b00000000000000000000000000000000 '
b00000000000000000000000000000000 3
b01 =
b00 (
b00 4
b00 =
b10101010 -
b00 ,
#2850
1!
16
b00 0
b10101010 5
b00 :
b00 ;
b00 <
b10101010 9
#3000
0!
06
0"
07
#3150
1!
16
#3300
0!
06
1%
11
b10 &
b10 2
b01 (
b01 4
b01 =
b10100110 -
b11 ,
b10100110 9
b11 :
b11 ;
b11 <
#3450
1!
16
b11 0
b10100110 5
b10100010 9
#3600
0!
06
1"
17
0%
01
b00 &
b00 2
b00 (
b00 4
b00 =
b10101010 -
b00 ,
b11 ;
b10100110 9
#3750
1!
16
b00 0
b10101010 5
b00 :
b00 ;
b00 <
b10101010 9
#3900
0!
06
0"
07
#4050
1!
16
#4200
0!
06
1#
1.
b00000000000000000000000000000100 $
b00000000000000000000000000000100 /
b01 <
1%
11
b10 &
b10 2
1+
b10101001 -
b11 ,
b10101001 9
b01 ;
b00 <
b10 :
1>
b11 :
#4350
1!
16
b11 0
b10101001 5
18
1)
b10101000 9
1>
#4500
0!
06
1"
17
0#
0.
b00000000000000000000000000000000 $
b00000000000000000000000000000000 /
b01 <
0%
01
b00 &
b00 2
0+
b10101010 -
b00 ,
0>
b11 ;
b11 <
b10101001 9
#4650
1!
16
b00 0
b10101010 5
08
0)
b00 :
b00 ;
b00 <
b10101010 9
#4800
0!
06
0"
07
#4950
1!
16
#5100
0!
06
1%
11
b10 &
b10 2
b10101001 -
b01 ,
b10101001 9
b01 :
b01 ;
b01 <
#5250
1!
16
b01 0
b10101001 5
b10101000 9
#5270
1#
1.
b00000000000000000000000000000100 $
b00000000000000000000000000000100 /
b00 <
0%
01
b00 &
b00 2
1+
b11 ,
b10 :
1>
b01 ;
b10101001 9
b11 :
#5400
0!
06
#5550
1!
16
b11 0
18
1)
b11 ;
b10 <
0>
b10 :
#5570
b00000000000000000000000000001000 $
b00000000000000000000000000001000 /
b01 <
0+
b10 ,
#5700
0!
06
#5850
1!
16
b10 0
08
0)
b10 ;
b00 <
b00 :
1>
b01 :
#5870
0#
0.
b00000000000000000000000000000000 $
b00000000000000000000000000000000 /
b10 <
b10 &
b10 2
b00000000000000000000000000000100 '
b00000000000000000000000000000100 3
b01 =
b01 (
b01 4
b00 =
b10101010 -
0>
b10 :
b10 ;
b10101010 9
#6000
0!
06
#6150
1!
16
b10101010 5
b10101011 9
#6300
0!
06
1"
17
b00 &
b00 2
b00000000000000000000000000000000 '
b00000000000000000000000000000000 3
b01 =
b00 (
b00 4
b00 =
b00 ,
b10101010 9
#6450
1!
16
b00 0
b00 :
b00 ;
b00 <
#6600
0!
06
0"
07
#6750
1!
16
#6900
0!
06
